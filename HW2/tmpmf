COMP = g++
#-5.3.0
LIBS = -ldl
default:
	make match
	make lib
rps_match:
	make match
rps_lib:
	make lib

OBJS =   FileHandler.o GameManager.o  MazeFileParser.o ParserErrorHandler.o
LIBOBJS =   SecondAlgorithm.o FirstAlgorithm.o
EXECOBJS= $(OBJS) main.o MatchManager.o AlgorithmRegistration.o Maze.o
CPP_LINK_FLAG = -shared
EXEC = ex2
CPP_COMP_FLAG = -std=c++14 -g -Wall -Wextra \
-Werror -pedantic-errors -DNDEBUG
#CPP_COMP_FLAG = -std=c++14 -g -pedantic-errors -DNDEBUG

$(EXEC): $(EXECOBJS)
	$(COMP) -rdynamic -o $(EXEC)  $(EXECOBJS) $(LIBS)

FirstAlgorithm.o:FirstAlgorithm.h FirstAlgorithm.cpp AlgorithmRegistration.h AbstractAlgorithm.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
FirstAlgorithm.so:FirstAlgorithm.o
	$(COMP) -shared -Wl,-soname,FirstAlgorithm.so -o FirstAlgorithm.so   FirstAlgorithm.o

SecondAlgorithm.o:SecondAlgorithm.h SecondAlgorithm.cpp AlgorithmRegistration.h AbstractAlgorithm.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
SecondAlgorithm.so:SecondAlgorithm.o
	$(COMP) -shared -Wl,-soname,SecondAlgorithm.so -o SecondAlgorithm.so   SecondAlgorithm.o


MatchManager.o:MatchManager.h MatchManager.cpp GameManager.h Maze.h
	$(COMP) $(CPP_COMP_FLAG) -c $*.cpp

main.o: main.cpp Maze.h MatchManager.h ParserErrorHandler.h FileHandler.h
	$(COMP) $(CPP_COMP_FLAG) -c $*.cpp
FileHandler.o: FileHandler.cpp FileHandler.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
GameManager.o: GameManager.cpp GameManager.h MazeFileParser.h AbstractAlgorithm.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
MazeFileParser.o: MazeFileParser.cpp MazeFileParser.h ParserErrorHandler.h Maze.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
ParserErrorHandler.o: ParserErrorHandler.cpp ParserErrorHandler.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp
Maze.o:	Maze.cpp Maze.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp

AlgorithmRegistration.o:AlgorithmRegistration.h AlgorithmRegistration.h AbstractAlgorithm.h MatchManager.h
	$(COMP) -fPIC $(CPP_COMP_FLAG) -c $*.cpp


match: $(EXEC) $(EXECOBJS)
lib: $(LIBOBJS) FirstAlgorithm.so SecondAlgorithm.so

clean:
	rm -f *.so *.o $(EXEC)
